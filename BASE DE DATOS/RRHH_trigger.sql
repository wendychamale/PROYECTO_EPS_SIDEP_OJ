

--------------------------------------------------------
--  DDL for Trigger TRGBUDIRECCION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "RRHH"."TRGBUDIRECCION" 
BEFORE UPDATE
OF ID_DIRECCION
ON RRHH.RH_DEPENDENCIA 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
/* Formatted on 2008/05/23 13:33 (Formatter Plus v4.8.8) */
DECLARE
   tmpvar   NUMBER;

/******************************************************************************
   NAME:
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        23/05/2008             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:
      Sysdate:         23/05/2008
      Date and Time:   23/05/2008, 01:16:26 p.m., and 23/05/2008 01:16:26 p.m.
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      RH_DEPENDENCIA (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
   CURSOR c_dir
   IS
      SELECT pais, departamento
        FROM rh_direccion_dependencia
       WHERE rh_direccion_dependencia.id_direccion = :NEW.id_direccion;

   c        c_dir%ROWTYPE;
BEGIN
   IF (:NEW.id_direccion != :OLD.id_direccion)
   THEN
      OPEN c_dir;

      FETCH c_dir
       INTO c;

      CLOSE c_dir;

      UPDATE rh_partida_dependencia
         SET pais = c.pais,
             departamento = c.departamento
       WHERE dependencia = :OLD.dependencia;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END; 





/
ALTER TRIGGER "RRHH"."TRGBUDIRECCION" ENABLE;

  
--------------------------------------------------------
--  DDL for Trigger TR_TT_DEPENDENCIA_CORREO_TR
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "RRHH"."TR_TT_DEPENDENCIA_CORREO_TR" 
BEFORE INSERT OR UPDATE OR DELETE ON RRHH.TT_DEPENDENCIA_CORREO
FOR EACH ROW
DECLARE 
-- 
-- Purpose: Este trigger realiza todo el proceso de trazabilidad del registro 
-- Este trigger fue generado por medio del procedimiento almacenado: CREA_TRIGGER_TRAZABILIDAD 
-- 
-- MODIFICATION HISTORY 
-- Procedimiento           Date    
-- ---------          ------  
-- CREA_TRIGGER_TRAZABILIDAD 16-OCT-20
-- 

v_id_registro NUMBER; 
v_cambio NUMBER := 0; 
v_ip_usuario VARCHAR2(15) := '10.101.3.65';
v_llave_secuencia NUMBER := 0; 
v_nuevo CONSTANT NUMBER := 1; 
v_baja CONSTANT NUMBER := 2; 
v_actualizado CONSTANT NUMBER := 3; 

v_id_trazabilidad NUMBER; 

TYPE t_cambio IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
v_numero_cambios t_cambio; 

BEGIN 
   IF INSERTING THEN 
      :NEW.ID_TRAZABILIDAD := FUNC_TRAZABILIDAD(0, 'TT_DEPENDENCIA_CORREO', v_nuevo, v_ip_usuario);

   ELSIF UPDATING THEN 
     -- Querys para comparar los campos actuales y nuevos para verificar que existan cambios
      SELECT DECODE(:NEW.ID_DEPENDENCIA_CORREO,:OLD.ID_DEPENDENCIA_CORREO,0,1) INTO v_numero_cambios (1) FROM DUAL;
      SELECT DECODE(:NEW.CORREO_ELECTRONICO,:OLD.CORREO_ELECTRONICO,0,1) INTO v_numero_cambios (2) FROM DUAL;
      SELECT DECODE(:NEW.ID_ESTADO,:OLD.ID_ESTADO,0,1) INTO v_numero_cambios (3) FROM DUAL;
      SELECT DECODE(:NEW.ID_SOURCE,:OLD.ID_SOURCE,0,1) INTO v_numero_cambios (4) FROM DUAL;
      SELECT DECODE(:NEW.ID_USUARIO_REGISTRO,:OLD.ID_USUARIO_REGISTRO,0,1) INTO v_numero_cambios (5) FROM DUAL;
      SELECT DECODE(:NEW.FECHA_REGISTRO,:OLD.FECHA_REGISTRO,0,1) INTO v_numero_cambios (6) FROM DUAL;
      SELECT DECODE(:NEW.OBSERVACIONES,:OLD.OBSERVACIONES,0,1) INTO v_numero_cambios (7) FROM DUAL;
      SELECT DECODE(:NEW.IP,:OLD.IP,0,1) INTO v_numero_cambios (8) FROM DUAL;

     FOR i IN 1 .. v_numero_cambios.count 
          LOOP 
              IF v_numero_cambios(i) > 0 THEN 
                  v_cambio := 1; 
              END IF; 
          END LOOP; 

          IF v_cambio > 0 THEN 
              INSERT INTO TH_DEPENDENCIA_CORREO (ID_DEPENDENCIA_CORREO, CORREO_ELECTRONICO, ID_ESTADO, ID_SOURCE, ID_USUARIO_REGISTRO, FECHA_REGISTRO, OBSERVACIONES, ID_TRAZABILIDAD, IP) VALUES (:OLD.ID_DEPENDENCIA_CORREO, :OLD.CORREO_ELECTRONICO, :OLD.ID_ESTADO, :OLD.ID_SOURCE, :OLD.ID_USUARIO_REGISTRO, :OLD.FECHA_REGISTRO, :OLD.OBSERVACIONES, :OLD.ID_TRAZABILIDAD, :OLD.IP);
              :NEW.ID_TRAZABILIDAD := FUNC_TRAZABILIDAD(:OLD.ID_TRAZABILIDAD, 'TT_DEPENDENCIA_CORREO', v_actualizado, v_ip_usuario);
          END IF; 

   ELSIF DELETING THEN 
       INSERT INTO TH_DEPENDENCIA_CORREO (ID_DEPENDENCIA_CORREO, CORREO_ELECTRONICO, ID_ESTADO, ID_SOURCE, ID_USUARIO_REGISTRO, FECHA_REGISTRO, OBSERVACIONES, ID_TRAZABILIDAD, IP) VALUES (:OLD.ID_DEPENDENCIA_CORREO, :OLD.CORREO_ELECTRONICO, :OLD.ID_ESTADO, :OLD.ID_SOURCE, :OLD.ID_USUARIO_REGISTRO, :OLD.FECHA_REGISTRO, :OLD.OBSERVACIONES, :OLD.ID_TRAZABILIDAD, :OLD.IP);
       v_id_trazabilidad := FUNC_TRAZABILIDAD(:OLD.ID_TRAZABILIDAD, 'TT_DEPENDENCIA_CORREO', v_baja, v_ip_usuario);
   END IF; 

END TR_TT_DEPENDENCIA_CORREO_TR;
/
ALTER TRIGGER "RRHH"."TR_TT_DEPENDENCIA_CORREO_TR" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TR_TT_DEPENDENCIA_RH_CIDEJ_TR
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "RRHH"."TR_TT_DEPENDENCIA_RH_CIDEJ_TR" 
BEFORE INSERT OR UPDATE OR DELETE ON RRHH.TT_DEPENDENCIA_RH_CIDEJ
FOR EACH ROW
DECLARE 
-- 
-- Purpose: Este trigger realiza todo el proceso de trazabilidad del registro 
-- Este trigger fue generado por medio del procedimiento almacenado: CREA_TRIGGER_TRAZABILIDAD 
-- 
-- MODIFICATION HISTORY 
-- Procedimiento           Date    
-- ---------          ------  
-- CREA_TRIGGER_TRAZABILIDAD 28/10/20
-- 

v_id_registro NUMBER; 
v_cambio NUMBER := 0; 
v_ip_usuario VARCHAR2(15) := '10.101.3.65';
v_llave_secuencia NUMBER := 0; 
v_nuevo CONSTANT NUMBER := 1; 
v_baja CONSTANT NUMBER := 2; 
v_actualizado CONSTANT NUMBER := 3; 

v_id_trazabilidad NUMBER; 

TYPE t_cambio IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
v_numero_cambios t_cambio; 

BEGIN 
   IF INSERTING THEN 
      :NEW.ID_TRAZABILIDAD := FUNC_TRAZABILIDAD(0, 'TT_DEPENDENCIA_RH_CIDEJ', v_nuevo, v_ip_usuario);

   ELSIF UPDATING THEN 
     -- Querys para comparar los campos actuales y nuevos para verificar que existan cambios
      SELECT DECODE(:NEW.ID_DEP_RH_CIDEJ,:OLD.ID_DEP_RH_CIDEJ,0,1) INTO v_numero_cambios (1) FROM DUAL;
      SELECT DECODE(:NEW.DEPENDENCIA,:OLD.DEPENDENCIA,0,1) INTO v_numero_cambios (2) FROM DUAL;
      SELECT DECODE(:NEW.ID_DESPACHO,:OLD.ID_DESPACHO,0,1) INTO v_numero_cambios (3) FROM DUAL;
      SELECT DECODE(:NEW.ID_ESTADO,:OLD.ID_ESTADO,0,1) INTO v_numero_cambios (4) FROM DUAL;
      SELECT DECODE(:NEW.ID_SOURCE,:OLD.ID_SOURCE,0,1) INTO v_numero_cambios (5) FROM DUAL;
      SELECT DECODE(:NEW.ID_USUARIO_REGISTRO,:OLD.ID_USUARIO_REGISTRO,0,1) INTO v_numero_cambios (6) FROM DUAL;
      SELECT DECODE(:NEW.FECHA_REGISTRO,:OLD.FECHA_REGISTRO,0,1) INTO v_numero_cambios (7) FROM DUAL;
      SELECT DECODE(:NEW.OBSERVACIONES,:OLD.OBSERVACIONES,0,1) INTO v_numero_cambios (8) FROM DUAL;
      SELECT DECODE(:NEW.IP,:OLD.IP,0,1) INTO v_numero_cambios (9) FROM DUAL;

     FOR i IN 1 .. v_numero_cambios.count 
          LOOP 
              IF v_numero_cambios(i) > 0 THEN 
                  v_cambio := 1; 
              END IF; 
          END LOOP; 

          IF v_cambio > 0 THEN 
              INSERT INTO TH_DEPENDENCIA_RH_CIDEJ (ID_DEP_RH_CIDEJ, DEPENDENCIA, ID_DESPACHO, ID_ESTADO, ID_SOURCE, ID_USUARIO_REGISTRO, FECHA_REGISTRO, OBSERVACIONES, ID_TRAZABILIDAD, IP) VALUES (:OLD.ID_DEP_RH_CIDEJ, :OLD.DEPENDENCIA, :OLD.ID_DESPACHO, :OLD.ID_ESTADO, :OLD.ID_SOURCE, :OLD.ID_USUARIO_REGISTRO, :OLD.FECHA_REGISTRO, :OLD.OBSERVACIONES, :OLD.ID_TRAZABILIDAD, :OLD.IP);
              :NEW.ID_TRAZABILIDAD := FUNC_TRAZABILIDAD(:OLD.ID_TRAZABILIDAD, 'TT_DEPENDENCIA_RH_CIDEJ', v_actualizado, v_ip_usuario);
          END IF; 

   ELSIF DELETING THEN 
       INSERT INTO TH_DEPENDENCIA_RH_CIDEJ (ID_DEP_RH_CIDEJ, DEPENDENCIA, ID_DESPACHO, ID_ESTADO, ID_SOURCE, ID_USUARIO_REGISTRO, FECHA_REGISTRO, OBSERVACIONES, ID_TRAZABILIDAD, IP) VALUES (:OLD.ID_DEP_RH_CIDEJ, :OLD.DEPENDENCIA, :OLD.ID_DESPACHO, :OLD.ID_ESTADO, :OLD.ID_SOURCE, :OLD.ID_USUARIO_REGISTRO, :OLD.FECHA_REGISTRO, :OLD.OBSERVACIONES, :OLD.ID_TRAZABILIDAD, :OLD.IP);
       v_id_trazabilidad := FUNC_TRAZABILIDAD(:OLD.ID_TRAZABILIDAD, 'TT_DEPENDENCIA_RH_CIDEJ', v_baja, v_ip_usuario);
   END IF; 

END TR_TT_DEPENDENCIA_RH_CIDEJ_TR;
/
ALTER TRIGGER "RRHH"."TR_TT_DEPENDENCIA_RH_CIDEJ_TR" ENABLE;


--------------------------------------------------------
--  DDL for Trigger TR_TT_GEST_DEPENDENCIA_TR
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "RRHH"."TR_TT_GEST_DEPENDENCIA_TR" 
BEFORE INSERT OR UPDATE OR DELETE ON RRHH.TT_GEST_DEPENDENCIA
FOR EACH ROW 
DECLARE 
-- 
-- Purpose: Este trigger realiza todo el proceso de trazabilidad del registro 
-- Este trigger fue generado por medio del procedimiento almacenado: CREA_TRIGGER_TRAZABILIDAD 
-- 
-- MODIFICATION HISTORY 
-- Procedimiento           Date    
-- ---------          ------  
-- CREA_TRIGGER_TRAZABILIDAD 27/05/21
-- 

v_id_registro NUMBER; 
v_cambio NUMBER := 0; 
v_ip_usuario VARCHAR2(15) := '10.101.3.65';
v_llave_secuencia NUMBER := 0; 
v_nuevo CONSTANT NUMBER := 1; 
v_baja CONSTANT NUMBER := 2; 
v_actualizado CONSTANT NUMBER := 3; 

v_id_trazabilidad NUMBER; 

TYPE t_cambio IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
v_numero_cambios t_cambio; 

BEGIN 
   IF INSERTING THEN 
      :NEW.ID_TRAZABILIDAD := FUNC_TRAZABILIDAD(0, 'TT_GEST_DEPENDENCIA', v_nuevo, v_ip_usuario);

   ELSIF UPDATING THEN 
     -- Querys para comparar los campos actuales y nuevos para verificar que existan cambios
      SELECT DECODE(:NEW.ID_GESTION_DEPENDENCIA,:OLD.ID_GESTION_DEPENDENCIA,0,1) INTO v_numero_cambios (1) FROM DUAL;
      SELECT DECODE(:NEW.CODIGO_DEPENDENCIA,:OLD.CODIGO_DEPENDENCIA,0,1) INTO v_numero_cambios (2) FROM DUAL;
      SELECT DECODE(:NEW.CODIGO_PRESUPUESTARIO,:OLD.CODIGO_PRESUPUESTARIO,0,1) INTO v_numero_cambios (3) FROM DUAL;
      SELECT DECODE(:NEW.NOMBRE_DEPENDENCIA,:OLD.NOMBRE_DEPENDENCIA,0,1) INTO v_numero_cambios (4) FROM DUAL;
      SELECT DECODE(:NEW.NOMBRE_GAFETE,:OLD.NOMBRE_GAFETE,0,1) INTO v_numero_cambios (5) FROM DUAL;
      SELECT DECODE(:NEW.NOMBRE_ABREVIADO,:OLD.NOMBRE_ABREVIADO,0,1) INTO v_numero_cambios (6) FROM DUAL;
      SELECT DECODE(:NEW.NOMBRE_DOCUMENTO,:OLD.NOMBRE_DOCUMENTO,0,1) INTO v_numero_cambios (7) FROM DUAL;
      SELECT DECODE(:NEW.CONECTOR,:OLD.CONECTOR,0,1) INTO v_numero_cambios (8) FROM DUAL;
      SELECT DECODE(:NEW.FECHA_DEL_ACUERDO,:OLD.FECHA_DEL_ACUERDO,0,1) INTO v_numero_cambios (9) FROM DUAL;
      SELECT DECODE(:NEW.FECHA_ENTRA_VIGENCIA,:OLD.FECHA_ENTRA_VIGENCIA,0,1) INTO v_numero_cambios (10) FROM DUAL;
      SELECT DECODE(:NEW.FECHA_ANULACION,:OLD.FECHA_ANULACION,0,1) INTO v_numero_cambios (11) FROM DUAL;
      SELECT DECODE(:NEW.REFERENCIA,:OLD.REFERENCIA,0,1) INTO v_numero_cambios (12) FROM DUAL;
      SELECT DECODE(:NEW.FUNCION_UNIDAD,:OLD.FUNCION_UNIDAD,0,1) INTO v_numero_cambios (13) FROM DUAL;
      SELECT DECODE(:NEW.DEPARTAMENTO,:OLD.DEPARTAMENTO,0,1) INTO v_numero_cambios (14) FROM DUAL;
      SELECT DECODE(:NEW.MUNICIPIO,:OLD.MUNICIPIO,0,1) INTO v_numero_cambios (15) FROM DUAL;
      SELECT DECODE(:NEW.TIPO_AREA,:OLD.TIPO_AREA,0,1) INTO v_numero_cambios (16) FROM DUAL;
      SELECT DECODE(:NEW.ACUERDO_DIGITAL,:OLD.ACUERDO_DIGITAL,0,1) INTO v_numero_cambios (17) FROM DUAL;
      SELECT DECODE(:NEW.ID_TIPO_GESTION,:OLD.ID_TIPO_GESTION,0,1) INTO v_numero_cambios (18) FROM DUAL;
      SELECT DECODE(:NEW.ID_ESTADO,:OLD.ID_ESTADO,0,1) INTO v_numero_cambios (19) FROM DUAL;
      SELECT DECODE(:NEW.ID_SOURCE,:OLD.ID_SOURCE,0,1) INTO v_numero_cambios (20) FROM DUAL;
      SELECT DECODE(:NEW.IP,:OLD.IP,0,1) INTO v_numero_cambios (21) FROM DUAL;
      SELECT DECODE(:NEW.ID_ESTADO_PROCESO,:OLD.ID_ESTADO_PROCESO,0,1) INTO v_numero_cambios (22) FROM DUAL;
      SELECT DECODE(:NEW.OBSERVACIONES,:OLD.OBSERVACIONES,0,1) INTO v_numero_cambios (23) FROM DUAL;
      SELECT DECODE(:NEW.ID_USUARIO_REGISTRO,:OLD.ID_USUARIO_REGISTRO,0,1) INTO v_numero_cambios (24) FROM DUAL;
      SELECT DECODE(:NEW.FECHA_REGISTRO,:OLD.FECHA_REGISTRO,0,1) INTO v_numero_cambios (25) FROM DUAL;
      SELECT DECODE(:NEW.FECHA_PUBLICACION,:OLD.FECHA_PUBLICACION,0,1) INTO v_numero_cambios (26) FROM DUAL;
      SELECT DECODE(:NEW.OBS_FECHA_VIGENCIA,:OLD.OBS_FECHA_VIGENCIA,0,1) INTO v_numero_cambios (27) FROM DUAL;

     FOR i IN 1 .. v_numero_cambios.count 
          LOOP 
              IF v_numero_cambios(i) > 0 THEN 
                  v_cambio := 1; 
              END IF; 
          END LOOP; 

          IF v_cambio > 0 THEN 
              INSERT INTO TH_GEST_DEPENDENCIA (ID_GESTION_DEPENDENCIA, CODIGO_DEPENDENCIA, CODIGO_PRESUPUESTARIO, NOMBRE_DEPENDENCIA, NOMBRE_GAFETE, NOMBRE_ABREVIADO, NOMBRE_DOCUMENTO, CONECTOR, FECHA_DEL_ACUERDO, FECHA_ENTRA_VIGENCIA, FECHA_ANULACION, REFERENCIA, FUNCION_UNIDAD, DEPARTAMENTO, MUNICIPIO, TIPO_AREA, ACUERDO_DIGITAL, ID_TIPO_GESTION, ID_ESTADO, ID_SOURCE, IP, ID_ESTADO_PROCESO, ID_TRAZABILIDAD, OBSERVACIONES, ID_USUARIO_REGISTRO, FECHA_REGISTRO, FECHA_PUBLICACION, OBS_FECHA_VIGENCIA) VALUES (:OLD.ID_GESTION_DEPENDENCIA, :OLD.CODIGO_DEPENDENCIA, :OLD.CODIGO_PRESUPUESTARIO, :OLD.NOMBRE_DEPENDENCIA, :OLD.NOMBRE_GAFETE, :OLD.NOMBRE_ABREVIADO, :OLD.NOMBRE_DOCUMENTO, :OLD.CONECTOR, :OLD.FECHA_DEL_ACUERDO, :OLD.FECHA_ENTRA_VIGENCIA, :OLD.FECHA_ANULACION, :OLD.REFERENCIA, :OLD.FUNCION_UNIDAD, :OLD.DEPARTAMENTO, :OLD.MUNICIPIO, :OLD.TIPO_AREA, :OLD.ACUERDO_DIGITAL, :OLD.ID_TIPO_GESTION, :OLD.ID_ESTADO, :OLD.ID_SOURCE, :OLD.IP, :OLD.ID_ESTADO_PROCESO, :OLD.ID_TRAZABILIDAD, :OLD.OBSERVACIONES, :OLD.ID_USUARIO_REGISTRO, :OLD.FECHA_REGISTRO, :OLD.FECHA_PUBLICACION, :OLD.OBS_FECHA_VIGENCIA);
              :NEW.ID_TRAZABILIDAD := FUNC_TRAZABILIDAD(:OLD.ID_TRAZABILIDAD, 'TT_GEST_DEPENDENCIA', v_actualizado, v_ip_usuario);
          END IF; 

   ELSIF DELETING THEN 
       INSERT INTO TH_GEST_DEPENDENCIA (ID_GESTION_DEPENDENCIA, CODIGO_DEPENDENCIA, CODIGO_PRESUPUESTARIO, NOMBRE_DEPENDENCIA, NOMBRE_GAFETE, NOMBRE_ABREVIADO, NOMBRE_DOCUMENTO, CONECTOR, FECHA_DEL_ACUERDO, FECHA_ENTRA_VIGENCIA, FECHA_ANULACION, REFERENCIA, FUNCION_UNIDAD, DEPARTAMENTO, MUNICIPIO, TIPO_AREA, ACUERDO_DIGITAL, ID_TIPO_GESTION, ID_ESTADO, ID_SOURCE, IP, ID_ESTADO_PROCESO, ID_TRAZABILIDAD, OBSERVACIONES, ID_USUARIO_REGISTRO, FECHA_REGISTRO, FECHA_PUBLICACION, OBS_FECHA_VIGENCIA) VALUES (:OLD.ID_GESTION_DEPENDENCIA, :OLD.CODIGO_DEPENDENCIA, :OLD.CODIGO_PRESUPUESTARIO, :OLD.NOMBRE_DEPENDENCIA, :OLD.NOMBRE_GAFETE, :OLD.NOMBRE_ABREVIADO, :OLD.NOMBRE_DOCUMENTO, :OLD.CONECTOR, :OLD.FECHA_DEL_ACUERDO, :OLD.FECHA_ENTRA_VIGENCIA, :OLD.FECHA_ANULACION, :OLD.REFERENCIA, :OLD.FUNCION_UNIDAD, :OLD.DEPARTAMENTO, :OLD.MUNICIPIO, :OLD.TIPO_AREA, :OLD.ACUERDO_DIGITAL, :OLD.ID_TIPO_GESTION, :OLD.ID_ESTADO, :OLD.ID_SOURCE, :OLD.IP, :OLD.ID_ESTADO_PROCESO, :OLD.ID_TRAZABILIDAD, :OLD.OBSERVACIONES, :OLD.ID_USUARIO_REGISTRO, :OLD.FECHA_REGISTRO, :OLD.FECHA_PUBLICACION, :OLD.OBS_FECHA_VIGENCIA);
       v_id_trazabilidad := FUNC_TRAZABILIDAD(:OLD.ID_TRAZABILIDAD, 'TT_GEST_DEPENDENCIA', v_baja, v_ip_usuario);
   END IF; 

END TR_TT_GEST_DEPENDENCIA_TR;
/
ALTER TRIGGER "RRHH"."TR_TT_GEST_DEPENDENCIA_TR" ENABLE;